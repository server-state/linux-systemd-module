module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){const r=n(1),o=n(2);function a(e){if("yes"===e||"no"===e)return"yes"===e;const t=parseFloat(e);return Number.isNaN(t)?e:t}const i=Object.freeze({name:"",addProps:"",defaults:!0});e.exports=async function(e){if(!e||!e.length)throw new Error("No units were specified. Expected argument to be of type object[], with required member 'name' and a optional member 'addProps' both type of string.");const t={};for(let p of e){if("string"!=typeof(p=Object.assign({},i,p)).name)throw new Error("Key 'name' from unit "+p.name+" has an invalid type. Expected: string, Given: "+typeof p.addProps);if(p.name=p.name.trim(),!p.name)throw new Error("Missing or empty unit name. The unit name must at least contain one regular character.");let e=p.name.split(".");if(e.length<2&&(p.name=p.name+".service",e.push("service")),"string"!=typeof p.addProps)throw new Error("Key 'addProps' from unit "+p.name+" has an invalid type. Expected: undefined|string, Given: "+typeof p.addProps);if("boolean"!=typeof p.defaults)throw new Error("Key 'defaults' from unit "+p.name+" has an invalid type. Expected: boolean, Given: "+typeof p.addProps);if(t[p.name])throw new Error("Unit with name '"+p.name+"' already requested.");const f={UnitType:e[1]};(await o("systemctl show "+p.name+" --property "+(n=e[1],s=p.addProps,u=p.defaults,(u?r.PROPERTIES.any:"")+(u&&r.PROPERTIES[n]?","+r.PROPERTIES[n]:"")+(s?","+s:"")))).stdout.split("\n").forEach(e=>{if(e.length>0){const t=e.split("=");f[t[0]]=a(t[1])}}),t[p.name]=f}var n,s,u;return t}},function(e,t){e.exports=Object.freeze({PROPERTIES:{any:"LoadState,ActiveState,SubState,Description,Id,Result,UnitFileState,ActiveEnterTimestamp,ActiveEnterTimestampMonotonic",service:"CleanResult,MainPID,Type,Restart,MemoryCurrent,Nice,RemainAfterExit,TasksCurrent",mount:"Where,What,Type,LazyUnmount",slice:"TasksCurrent",automount:"Triggers",timer:"NextElapseUSecRealtime,Triggers",swap:"What",path:"Triggers"}})},function(e,t){e.exports=require("shell-exec")}]);